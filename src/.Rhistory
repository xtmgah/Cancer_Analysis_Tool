runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?pdf
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
aa <- read.table(paste0('../Data/','Breast_whole.csv'),sep = '\t',header = T)
View(aa)
aa <- read.table(paste0('../Data/','Breast_whole.csv'),sep = ',',header = T)
View(aa)
runApp()
getwd()
aa <- read.table(paste0('../Data/','Breast_whole.csv'),sep = ',',header = T)
Standard_columns <- c('sample_id','chromosome','position','reference','mutated_to')
View(aa)
colnames(aa) <- c(NA,'sample_id','chromosome','position',NA,'reference','mutated_to',NA)
colnames(aa)
class(colnames(aa))
intersect(colnames(aa),'samlpe_id')
intersect(colnames(aa),c('samlpe_id'))
intersect(colnames(aa),c('samlpe_id',chromosome))
intersect(colnames(aa),c('samlpe_id','chromosome'))
intersect(colnames(aa),c('sample_id'))
colnames(aa) <- c('study_code','sample_id','chromosome','position','chr_strand','reference','mutated_to','cancer_type')
write.table(aa, paste0('../Data/','Breast_whole.csv'),sep = ',',col.names = T,row.names = F)
getwd()
bb <- read.table(paste0('../Data/','Breast_whole.csv'),sep = ',',header = T)
View(bb)
runApp()
runApp()
View(input_table)
dim(input_table)
dim(input_table)[2]
TRUE & FALSE
TRUE & TRUE
F & F
runApp()
getw
getwd()
file.exists('data')
file.exists('../data')
file.exists('../data')
file.exists('../Data')
runApp()
runApp()
runApp()
View(input_table)
runApp()
runApp()
catalog <- read.table('result/input_table.csv',sep = ',',header = T)
catalog <- read.table('../result/input_table.csv',sep = ',',header = T)
View(catalog)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*4)
ceiling(runif(1)*4)
ceiling(runif(1)*4)
ceiling(runif(1)*4)
ceiling(runif(1)*4)
ceiling(runif(1)*4)
ceiling(runif(1)*4)
ceiling(runif(1)*4)
floor(runif(1)*4)
floor(runif(1)*4)
floor(runif(1)*4)
floor(runif(1)*4)
floor(runif(1)*4)
floor(runif(1)*4)
floor(runif(1)*4)
floor(runif(1)*4)
dim(catalog)[1]
c('A','C','G','T')[1]
c('A','C','G','T')[2]
c('A','C','G','T')[3]
c('A','C','G','T')[3234]
c('A','C','G','T')[4]
num <- c(0,1,2,3)
names(num) <- c('A','C','G','T')              # make a dictionary
catalog$num_ref <- as.numeric(num[catalog$reference])             # convert REF column to numeric values
catalog$rands <- floor(runif(dim(catalog)[1])*4)            # generate random numbers between 0 to 3
catalog$num_alt2 <- (catalog$num_ref + catalog$rands) %% 4  # generate random numeric values for ALT column
catalog$alt2 <- c('A','C','G','T')[catalog$num_alt2+1]      # reconstruct character values from numeric values
catalog$mutated_to <- catalog$alt2                                 # replace old ALT column with new random ALT column
catalog <- catalog[,-c(6:9)]                               # delete temporarily added columns to catalog matrix
character(0)
character(0) == ''
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
a <- a+1
iiii<-0
iii <- iii+1
getwd()
library("BSgenome.Hsapiens.UCSC.hg19")
seqnames(Hsapiens)
catalog <- read.table('../result/input_table.csv',sep = ',',header = T)
which(catalog$chromosome=='MT')
which(catalog$chromosome=='M')
View(catalog)
catalog$chromosome[which(catalog$chromosome=='MT')] <- 'M'
View(catalog)
View(catalog)
is.na(NA)
is.na(sdf)
is.na('sf')
is.na(2)
getwd()
a <- data.frame(A=c('1','2','3','a','t'),B=1:5)
View(a)
a <- data.frame(A=c('a','b','c','d','e'),B=1:5)
class(a$A)
levels(a$A)
a <- data.frame(A=c('a','b','c','d','e'),B=1:5)
levels(a$A)
a <- a[,-5]
View(a)
a <- a[,-5]
View(a)
a <- a[-5,]
levels(a$A)
write.table(a,'test.csv',sep = ',',col.names = T,row.names = F)
b <- read.table('test.csv',sep = ',',header = T)
View(b)
levels(b$A)
catalog <- read.table('../result/input_table.csv',sep = ',',header = T)
levels(catalog$chromosome)
'1' %in% levels(catalog$chromosome)
'M' %in% levels(catalog$chromosome)
'MT' %in% levels(catalog$chromosome)
if('MT' %in% levels(catalog$chromosome)) {catalog$chromosome[which(catalog$chromosome=='MT')] <- 'M'}
if('MT' %in% levels(catalog$chromosome)) {
print('hello')
catalog$chromosome[which(catalog$chromosome=='MT')] <- 'M'}
method <- 1
catalog$mutated_to <- catalog$alt2                                 # replace old ALT column with new random ALT column
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
aa <- 234
write.table(aa,file = 'test.txt',row.names = F,col.names = F)
getwd()
Max_N <- 10
write.table(Max_N,file = '../result/Max_N.txt',row.names = F,col.names = F)
getwd()
runApp()
floor(runif(1)*4)
floor(runif(1)*4)
floor(runif(1)*4)
floor(runif(1)*4)
floor(runif(1)*4)
floor(runif(1)*4)
floor(runif(1)*4)
floor(runif(1)*4)
floor(runif(1)*4)
floor(runif(1)*4)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(input_table)
View(input_table)
runApp()
runApp()
invalid_columns <- c('chromosome_end')
invalid_columns
input_table <<- input_table[,-invalid_columns] # remove
invalid_rows <- c()
invalid_rows <- c(invalid_rows,which(input_table[,'chromosome_end'] - input_table[,'chromosome_start'] != 0))
input_table <<- input_table[-invalid_rows,]    # remove
runApp()
View(input_table)
invalid_rows <- c()
invalid_rows <- c(invalid_rows,which(input_table[,'chromosome_end'] - input_table[,'chromosome_start'] != 0))
if(length(invalid_rows) !=0 ){input_table <<- input_table[-invalid_rows,]}    # remove
View(input_table)
input_table[,'chromosome_end']
input_table[,-'chromosome_end']
which(c(1:10) == 3)
sapply(c(2,3,7,1),which(c(1:10) == i))
sapply(c(2,3,7,1),function(i) which(c(1:10) == i))
sapply(c(2,3,7,1),function(i){which(c(1:10) == i)})
sapply(invalid_colnames,function(n){which(colnames(input_table) == n)})
invalid_colnames <- c('chromosome_end')
sapply(invalid_colnames,function(n){which(colnames(input_table) == n)})
View(input_table)
invalid_colnames <- c('chromosome_end','icgc_sample_id')
sapply(invalid_colnames,function(n){which(colnames(input_table) == n)})
invalid_colnames <- c('chromosome_end','icgc_sample')
sapply(invalid_colnames,function(n){which(colnames(input_table) == n)})
as.numeric(sapply(invalid_colnames,function(n){which(colnames(input_table) == n)}))
invalid_colnames <- c('chromosome_end')
as.numeric(sapply(invalid_colnames,function(n){which(colnames(input_table) == n)}))
invalid_columns <- as.numeric(sapply(invalid_colnames,function(n){which(colnames(input_table) == n)}))
input_table <<- input_table[,-invalid_columns] # remove
View(input_table)
colnames(input_table) <- c('sample_id','chromosome','position','reference','mutated_to')
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
a < read.table('../data/Breast_whole.csv',sep = ',',header = T)
a <- read.table('../data/Breast_whole.csv',sep = ',',header = T)
View(a)
View(a)
row.names(a) <- c('r1','sample_id','chromosome','position','r5','reference','mutated_to','r8')
colnames(a) <- c('r1','sample_id','chromosome','position','r5','reference','mutated_to','r8')
a <- a[,-c('r1','r5','r8')]
a <- a[,-c(1,5,8)]
write.table(a,'../data/Breast_whole.csv',sep = ',',col.names = T,row.names = F)
a <- read.table('../data/blood_whole.csv',sep = ',',header = T)
View(a)
a <- a[,-c(1,5,8)]
View(a)
colnames(a) <- c('sample_id','chromosome','position','reference','mutated_to')
colnames(a) <- c('sample_id','chromosome','position','reference','mutated_to')
write.table(a,'../data/blood_whole.csv',sep = ',',row.names = F,col.names = T)
shiny::runApp()
shiny::runApp()
runApp()
cat('/\')
sdf
sdf
''
v
/
\
dsf
'sadsd'
cat('/\/')
cat('/\\/')
cat('/\\//\\/')
cat('/\\/\\')
cat('/\\/\\/\\/\\/\\/\\/\\/\\')
cat('/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\')
cat('/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\nasdf')
cat('/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\')
cat('/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\')
cat('/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/')
cat('/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/')
cat('/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/')
cat('/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/')
cat(paste0('/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\',
'\n',
'\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/'))
cat(paste0('/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\',
'\n',
'\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/'))
cat('/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n')
cat('\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\n')
ceiling()
ceiling(500 /30)
17*30
ang_dis <- function(a,b)
{
if(((a%*%b)/(sqrt((a%*%a)*(b%*%b)))) > 1){return(0)}
return((2*acos((a%*%b)/(sqrt((a%*%a)*(b%*%b)))))/pi)
}
matrix(c(1:10),1)
ang_dis(matrix(c(1:10),1),matrix(c(1:10),1))
ang_dis(matrix(c(1:10),1),t(matrix(c(1:10),1)))
matrix(c(1:10),1) * matrix(c(1:10),1)
matrix(c(1:10),1) * t(matrix(c(1:10),1))
t(matrix(c(1:10),1))
matrix(c(1:10),1)
matrix(c(1:10),1) %*% t(matrix(c(1:10),1))
ang_dis <- function(a,b)
{
b <- t(b)
if(((a%*%b)/(sqrt((a%*%a)*(b%*%b)))) > 1){return(0)}
return((2*acos((a%*%b)/(sqrt((a%*%a)*(b%*%b)))))/pi)
}
ang_dis(matrix(c(1:10),1),t(matrix(c(1:10),1)))
ang_dis(matrix(c(1:10),1),matrix(c(1:10),1))
ang_dis <- function(a,b)
{
if(((a%*%t(b))/(sqrt((a%*%t(a))*(b%*%t(b))))) > 1){return(0)}
return((2*acos((a%*%t(b))/(sqrt((a%*%t(a))*(b%*%t(b))))))/pi)
}
ang_dis(matrix(c(1:10),1),matrix(c(1:10),1))
ang_dis(matrix(c(1:10),1),matrix(c(2:11),1))
ang_dis(matrix(c(1:3),1),matrix(c(2:4),1))
matrix(c(1:10),4)
matrix(c(1:10),2)
dim(matrix(c(1:10),2))
as.character(dim(matrix(c(1:10),2)))
paste0(as.character(dim(matrix(c(1:10),2))),collapse = ' ')
matrix(c(1:10),2)
matrix(c(1:10),2)[1,]
max(c(1,2,4,6,-2,4))
order(c(1,2,4,6,-2,4))
setdiff(c(1:10),4)
setdiff(setdiff(c(1:10),4),10)
min(4)
setdiff(4,5)
setdiff(4,5)
setdiff(4,4)
N <- 7
rep(0,N)
which(c(1:10) < 0)
which(c(1:10) < 0) == NULL
is.null()
is.null(which(c(1:10) < 0))
cat(c(1:10))
available <- rep(0,1)
available
available[1]
which(available[1]==0)
possibles <- which(available[1]==0)
available[possibles] <- 1
available
destination_folder <- ''
destination_folder <- '3_mer 1'
plts <- plot_signatures_3mer(1)
source('~/Desktop/tool/Cancer_Analysis_Tool/src/Plot3merSignatures.R')
plts <- plot_signatures_3mer(1)
destination_folder <- '3_mer 1/'
plts <- plot_signatures_3mer(1)
plts <- plot_signatures_3mer(3)
length(plts)
plot(plts[1])
plot(plts[[1]])
plot(plts[[2]])
plot(plts[[3]])
pdf(paste0(destination_folder,'N',as.character(length(plts)),'.pdf'),15,4)
for(i in 1:length(plts))
{
plot(plts[[3]])
}
dev.off()
pdf(paste0(destination_folder,'N',as.character(length(plts)),'.pdf'),15,4)
for(i in 1:length(plts))
{
plot(plts[[i]])
}
dev.off()
destination_folder <- '3_mer 2/'
plts <- plot_signatures_3mer(4)
pdf(paste0(destination_folder,'N',as.character(length(plts)),'.pdf'),15,4)
for(i in 1:length(plts))
{
plot(plts[[i]])
}
dev.off()
shiny::runApp()
runApp()
runApp()
destination_folder <- '3_mer 3/'
source('~/Desktop/tool/Cancer_Analysis_Tool/src/Plot3merSignatures.R')
plt <- plot_signatures_3mer(3)
destination_folder
pdf(paste0(destination_folder,'N',as.character(length(plt)),'.pdf'),15,4)
dev.off()
plt <- plot_signatures_3mer(3)
pdf(paste0(destination_folder,'N',as.character(length(plt)),'.pdf'),15,4)
plt <- plot_signatures_3mer(3)
for(i in 1:length(plt))
{
plot(plt[[i]])
}
dev.off()
destination_folder <- ''
source('~/Desktop/tool/Cancer_Analysis_Tool/src/Plot3merSignatures.R')
plts <- plot_signatures_3mer(3)
destination_folder <- '3_mer/'
plts <- plot_signatures_3mer(3)
plts <- plot_signatures_3mer(3)
pdf(paste0(destination_folder,'N',as.character(length(plts)),'.pdf'),height = 7,width = 25)
for(i in 1:length(plts))
{
plot(plts[[i]])
}
dev.off()
plts <- plot_signatures_3mer(3)
pdf(paste0(destination_folder,'N',as.character(length(plts)),'.pdf'),15,4)
for(i in 1:length(plts))
{
plot(plts[[i]])
}
dev.off()
shiny::runApp()
matrix(c(1:10),2)
colSums(matrix(c(1:10),2))
a <- matrix(c(1:10),2)
a
a[,-c(2,4)] <- 0
a
exposures <- c(1:(N*G),N,G)
N <- 10
G <- 20
zero_samples <- c(1,2,4,10)
exposures <- c(1:(N*G),N,G)
exposures
N <- 10
G <- 20
zero_samples <- c(1,2,4,10)
exposures <- matrix(c(1:(N*G),N,G))
exposures
N <- 10
G <- 20
zero_samples <- c(1,2,4,10)
exposures <- matrix(c(1:(N*G)),N,G)
exposures
if(length(zero_samples) != 0)
{
exposures_complete <- matrix(0,N,(G+length(zero_samples)))
exposures_complete[,-zero_samples] <- exposures
exposures <- exposures_complete
}
exposures
a <- matrix(c(1:100),10)
a
a[c(1,2,7)]
a[c(1,2,7),]
matrix(a[c(1,2,7),],length(3))
matrix(a[c(1,2,7),],length(c(1,2,7)))
matrix(a[c(1,2),],length(c(1,2)))
matrix(a[c(2),],length(c(2)))
colMeans(matrix(a[c(2),],length(c(2))))
colMeans(matrix(a[c(1,2,7),],length(c(1,2,7))))
(91+92+97)
(91+92+97)/3
